# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SN0K47M5JS9H5tsEtC2FAm0NAIyRItjv
"""

import numpy as np
import pandas as pd
filepath = r"C:\Users\SIDDHARTH\Downloads\Data.xlsx"
# data = pd.read_excel(filepath)

data.head(5)
df = pd.DataFrame(data)
df.head(5)

### Count of null values after deleting empty rows from "ID" column
df.dropna(subset=['ID'], inplace=True)
df.isnull().sum()
### Replacing inappropriate values with "NA" in "Marital Status" column
df["Marital Status"]=df["Marital Status"].replace("Alone","Single")
df["Marital Status"]=df["Marital Status"].replace("Absurd","NA")
df["Marital Status"]=df["Marital Status"].replace("YOLO","NA")
df["Marital Status"].unique()
## Importing the "sales" table from the data
data_2 = pd.read_excel(filepath, sheet_name="Sales")
data_2.head(5)
sdf = pd.DataFrame(data_2)
sdf.head(5)
### Checking if there are any blank rows in the data.
sdf.isnull().sum()
df["Income"].mean()
df["Income"].std()
sdf["Num Own Website Purchases"].mean()
import matplotlib.pyplot as plt
plt.boxplot(sdf["Num Own Website Purchases"])
Q1 = sdf["Num Own Website Purchases"].quantile(0.25)
Q3 = sdf["Num Own Website Purchases"].quantile(0.75)

iqr = Q3 - Q1

# Lower and upper bounds
lower_bound = Q1 - 1.5 * iqr
upper_bound = Q3 + 1.5 * iqr

filtered_df = sdf[~((sdf["Num Own Website Purchases"] < lower_bound) | (sdf["Num Own Website Purchases"] > upper_bound))]

print(filtered_df)
Q1 = sdf["Amount"].quantile(0.25)
Q3 = sdf["Amount"].quantile(0.75)

iqr = Q3 - Q1

# Lower and upper bounds
lower_bound = Q1 - 1.5 * iqr
upper_bound = Q3 + 1.5 * iqr

filtered_df = sdf[~((sdf["Amount"] < lower_bound) | (sdf["Amount"] > upper_bound))]

print(filtered_df)
sdf["Amount"].mean()
plt.boxplot(sdf["Amount"])
max(sdf["Amount"])
(sdf["Amount"] > 4270).sum()
(sdf["Amount"] > 13000).sum()
(sdf["Amount"] < 4270).sum()
(sdf["Amount"]).count()
2240 / 2
plt.scatter(sdf["Amount"], sdf["Amount"])
plt.scatter(sdf["Num Own Website Purchases"], sdf["Num Own Website Purchases"])
plt.scatter(sdf["Num Social Media Purchases"], sdf["Num Social Media Purchases"])
plt.scatter(df["Income"], df["Income"])
plt.scatter(df["Birth Year"], df["Birth Year"])

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_excel('Data.xlsx')

# Define numerical columns
numerical_cols = ['Birth Year', 'Income', 'Kids Home', 'Teens Home', 'Recency']

# Create boxplot before removing outliers
plt.figure(facecolor='#ecc998')  # Set background color
df.boxplot(column=numerical_cols)  # Set boxplot color
plt.title('Boxplots Before Removing Outliers', color='black')  # Set title color
plt.xticks(rotation=45, color='black')  # Set x-axis labels rotation and color
plt.yticks(color='black')  # Set y-axis labels color
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Load the dataset
df = pd.read_excel("Data.xlsx")

# Calculate the number of missing values in each column
missing_count = df.isnull().sum()

# Create the line plot
plt.figure(figsize=(10, 6), facecolor='#ecc998')  # Set the background color for the entire plot
missing_count.plot(marker='o', color='orange', linestyle='-')
plt.title('Number of Missing Values in Each Field of the Customer Subsheet')
plt.xlabel('Features')
plt.ylabel('Number of Missing Values')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability if necessary
plt.grid(True)  # Add grid lines for better visualization
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Load the dataset
df = pd.read_excel("Book1.xlsx")

# Calculate the number of missing values in each column
missing_count = df.isnull().sum()

# Create the line plot
plt.figure(figsize=(10, 6), facecolor='#ecc998')  # Set the background color for the entire plot
missing_count.plot(marker='o', color='orange', linestyle='-')
plt.title('Number of Missing Values in Each Field of the Sales Subsheet')
plt.xlabel('Features')
plt.ylabel('Number of Missing Values')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability if necessary
plt.grid(True)  # Add grid lines for better visualization

# Annotate each point with the count
for x, y in enumerate(missing_count):
    plt.text(x, y, str(y), ha='center', va='bottom')

plt.show()



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_excel('Book1.xlsx')

# Set the background color for the plot
plt.figure(figsize=(10, 6), facecolor='#fae8e0')  # Set the background color for the entire plot
sns.set_style("whitegrid")  # Set the style to whitegrid
# sns.set_palette("pastel")   # Set the color palette to pastel
ax = sns.boxplot(data=df[['Num Own Website Purchases', 'Num Social Media Purchases', 'Amount']])

plt.title('Boxplot of Numerical Variables')
plt.show()

# Calculate summary statistics
summary_stats = df.describe()
print(summary_stats)

# Calculate outliers using IQR method
Q1 = summary_stats.loc['25%']
Q3 = summary_stats.loc['75%']
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Detect outliers
outliers = (df < lower_bound) | (df > upper_bound)
print("Outliers:")
print(outliers)

# Filter out outliers
cleaned_df = df[~outliers.any(axis=1)]
print("Cleaned DataFrame:")
print(cleaned_df)



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel('cleaned_data1.xlsx')
df1 = pd.read_excel('Sales_cleaned.xlsx')





plt.figure(figsize=(10, 6), facecolor='#ecc998')  # Set the background color for the entire plot

sns.histplot(data=df, x=df["Income"], bins=20, kde=True)
plt.title(f'Histogram of {"Income"}')
plt.xlabel("variable")
plt.ylabel('Frequency')
plt.show()


plt.figure(figsize=(10, 6), facecolor='#fae8e0')
plt.figure(facecolor='#ecc998')  # Set background color
 # Set the background color for the entire plot
sns.histplot(data=df1, x=df1["Amount"], bins=20, kde=True)
plt.title(f'Histogram of {"Amount"}')
plt.xlabel("variable")
plt.ylabel('Frequency')
plt.show()

import pandas as pd
from scipy.stats import pearsonr, spearmanr, ttest_ind, chi2_contingency, f_oneway

df = pd.read_excel('SD.xlsx')

pearson_corr, pearson_pval = pearsonr(df['Income'], df['Recency'])
print("Pearson Correlation Coefficient between Income and Recency:", pearson_corr)
print("Pearson p-value:", pearson_pval)

spearman_corr, spearman_pval = spearmanr(df['Income'], df['Recency'])
print("\nSpearman Correlation Coefficient between Income and Recency:", spearman_corr)
print("Spearman p-value:", spearman_pval)

cov_matrix = df[['Income', 'Kids Home', 'Teens Home']].cov()
print("\nCovariance Matrix:")
print(cov_matrix)

anova_result = f_oneway(df[df['Marital Status'] == 'Single']['Income'],
                        df[df['Marital Status'] == 'Married']['Income'],
                        df[df['Marital Status'] == 'Divorced']['Income'])
print("\nANOVA F-value:", anova_result.statistic)
print("ANOVA p-value:", anova_result.pvalue)

t_statistic, p_value = ttest_ind(df[df['Marital Status'] == 'Single']['Income'],
                                  df[df['Marital Status'] == 'Married']['Income'])
print("\nT-test statistic:", t_statistic)
print("P-value:", p_value)

contingency_table = pd.crosstab(df['Education'], df['Marital Status'])
chi2_statistic, chi2_p_value, _, _ = chi2_contingency(contingency_table)
print("\nChi-square statistic:", chi2_statistic)
print("P-value:", chi2_p_value)

import pandas as pd
from scipy.stats import pearsonr, spearmanr, ttest_ind, chi2_contingency, f_oneway

# Load the dataset
df = pd.read_excel('SD.xlsx')

# 1. Test between "Amount" and "Education"
print("\nTesting between 'Amount' and 'Education':")
anova_result_amount_education = f_oneway(df[df['Education'] == 'Basic']['Amount'],
                                         df[df['Education'] == 'Graduation']['Amount'],
                                         df[df['Education'] == 'Master']['Amount'],
                                         df[df['Education'] == 'PhD']['Amount'])
print("ANOVA F-value:", anova_result_amount_education.statistic)
print("ANOVA p-value:", anova_result_amount_education.pvalue)

# 2. Test between "Amount" and the number of kids
print("\nTesting between 'Amount' and the number of kids:")
anova_result_amount_kids = f_oneway(df[df['Kids Home'] == 0]['Amount'],
                                     df[df['Kids Home'] == 1]['Amount'],
                                     df[df['Kids Home'] == 2]['Amount'])
print("ANOVA F-value:", anova_result_amount_kids.statistic)
print("ANOVA p-value:", anova_result_amount_kids.pvalue)

# 3. Test between "Income" and "Recency"
print("\nTesting between 'Income' and 'Recency':")
pearson_corr_income_recency, pearson_pval_income_recency = pearsonr(df['Income'], df['Recency'])
print("Pearson Correlation Coefficient:", pearson_corr_income_recency)
print("Pearson p-value:", pearson_pval_income_recency)

# 4. Test between the number of kids and "Recency"
print("\nTesting between the number of kids and 'Recency':")
spearman_corr_kids_recency, spearman_pval_kids_recency = spearmanr(df['Kids Home'], df['Recency'])
print("Spearman Correlation Coefficient:", spearman_corr_kids_recency)
print("Spearman p-value:", spearman_pval_kids_recency)

# Covariance analysis
print("\nCovariance Matrix:")
cov_matrix = df[['Income', 'Kids Home', 'Teens Home']].cov()
print(cov_matrix)

import pandas as pd
import numpy as np

# Load the cleaned sales data into a DataFrame
sales_cleaned = pd.read_excel('Sales_cleaned.xlsx')

# Select only the "Amount" column
amount_column = sales_cleaned['Amount']

# Calculate mean, median, mode, standard deviation, variance, and IQR for the "Amount" column
mean_value = amount_column.mean()
median_value = amount_column.median()
mode_value = amount_column.mode().iloc[0]  # Mode might have multiple values, so we select the first one
std_dev_value = amount_column.std()
variance_value = amount_column.var()
Q1 = amount_column.quantile(0.25)
Q3 = amount_column.quantile(0.75)
IQR = Q3 - Q1

# Print the descriptive statistics
print("Descriptive statistics for the 'Amount' column:")
print("Mean:", mean_value)
print("Median:", median_value)
print("Mode:", mode_value)
print("Standard Deviation:", std_dev_value)
print("Variance:", variance_value)
print("Q1:", Q1)
print("Q3:", Q3)
print("IQR:", IQR)
import pandas as pd

# Load the cleaned sales data into a DataFrame
sales_cleaned = pd.read_excel('Sales_cleaned.xlsx')

# Select only the "Amount" column
amount_column = sales_cleaned['Amount']

# Calculate skewness and kurtosis for the "Amount" column
skewness_value = amount_column.skew()
kurtosis_value = amount_column.kurtosis()

# Print the skewness and kurtosis
print("Skewness of the 'Amount' column:", skewness_value)
print("Kurtosis of the 'Amount' column:", kurtosis_value)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_excel('SD.xlsx')

# Drop non-numeric columns
df_numeric = df.drop(columns=['ID', 'Education', 'Marital Status', 'Dt_Customer'])

# Calculate correlation matrix
corr_matrix = df_numeric.corr()

plt.figure(figsize=(10, 6), facecolor='#ecc998')

# Change the color map to 'viridis'
sns.heatmap(corr_matrix, annot=True, cmap='viridis', fmt=".2f")

plt.title('Correlation Heatmap')
plt.show()

current_year = pd.Timestamp.now().year
df['Age'] = current_year - df['Birth Year']
bins = [0, 20, 30, 40, 50, 60, 70, 80, 90, 100]
labels = ['0-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100']
df['Age Group'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)

plt.figure(figsize=(12, 8), facecolor='#fae8e0')
sns.barplot(x='Age Group', y='Amount', hue='Education', data=df, palette='viridis', ci=None)
plt.title('Average Amount Spent by Age Group, Education')
plt.xlabel('Age Group')
plt.ylabel('Average Amount')
plt.xticks(rotation=45)
plt.legend(title='Education', loc='upper right')
plt.show()

df1=pd.read_excel("SD.xlsx")
plt.figure(figsize=(12, 8), facecolor='#ecc998')

sns.barplot(x='Marital Status', y='Amount', data=df1, palette='pastel')
plt.title('Average Amount Spent by Marital Status')
plt.xlabel('Marital Status')
plt.ylabel('Average Amount')
plt.xticks(rotation=45)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
sns.swarmplot(x='Marital Status', y='Recency', data=df)
plt.title('Swarm Plot of Recency by Marital Status')
plt.xlabel('Marital Status')
plt.ylabel('Recency')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt



education_grouped = df.groupby('Education')[['Num Social Media Purchases', 'Num Own Website Purchases']].sum()

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.pie(education_grouped['Num Social Media Purchases'], labels=education_grouped.index, autopct='%1.1f%%', startangle=140)
plt.title('Social Media Purchases by Education')

plt.subplot(1, 2, 2)
plt.pie(education_grouped['Num Own Website Purchases'], labels=education_grouped.index, autopct='%1.1f%%', startangle=140)
plt.title('Website Purchases by Education')

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


plt.figure(figsize=(10, 6))
plt.scatter(df['Num Own Website Purchases'], df['Amount'], label='Own Website Purchases', color='blue', alpha=0.5)
plt.scatter(df['Num Social Media Purchases'], df['Amount'], label='Social Media Purchases', color='red', alpha=0.5)

plt.title('Purchases vs Amount')
plt.xlabel('Number of Purchases')
plt.ylabel('Amount Spent')
plt.legend()
plt.grid(True)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_excel("SD.xlsx")

df = df.drop(columns=['ID'])

sns.set_style("whitegrid")

plt.figure(figsize=(12, 8), facecolor='#fae8e0')
sns.boxplot(data=df, palette='husl', linewidth=2)
plt.title('Box Plot of All Fields with Outliers Removed')
plt.xlabel('Features')
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()